/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as ShubhiMaheshwariApi from "../../api";
import * as core from "../../core";

export const RefundsEntity: core.serialization.ObjectSchema<
    serializers.RefundsEntity.Raw,
    ShubhiMaheshwariApi.RefundsEntity
> = core.serialization.object({
    cfPaymentId: core.serialization.property("cf_payment_id", core.serialization.number().optional()),
    cfRefundId: core.serialization.property("cf_refund_id", core.serialization.string().optional()),
    orderId: core.serialization.property("order_id", core.serialization.string().optional()),
    refundId: core.serialization.property("refund_id", core.serialization.string().optional()),
    entity: core.serialization.stringLiteral("refund").optional(),
    refundAmount: core.serialization.property("refund_amount", core.serialization.number().optional()),
    refundCurrency: core.serialization.property("refund_currency", core.serialization.string().optional()),
    refundNote: core.serialization.property("refund_note", core.serialization.string().optional()),
    refundStatus: core.serialization.property(
        "refund_status",
        core.serialization.lazy(async () => (await import("..")).RefundsEntityRefundStatus).optional()
    ),
    refundArn: core.serialization.property("refund_arn", core.serialization.string().optional()),
    refundCharge: core.serialization.property("refund_charge", core.serialization.number().optional()),
    statusDescription: core.serialization.property("status_description", core.serialization.string().optional()),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    refundSplits: core.serialization.property(
        "refund_splits",
        core.serialization.list(core.serialization.lazyObject(async () => (await import("..")).VendorSplit)).optional()
    ),
    refundType: core.serialization.property(
        "refund_type",
        core.serialization.lazy(async () => (await import("..")).RefundsEntityRefundType).optional()
    ),
    refundMode: core.serialization.property(
        "refund_mode",
        core.serialization.lazy(async () => (await import("..")).RefundsEntityRefundMode).optional()
    ),
    createdAt: core.serialization.property("created_at", core.serialization.string().optional()),
    processedAt: core.serialization.property("processed_at", core.serialization.string().optional()),
    refundSpeed: core.serialization.property(
        "refund_speed",
        core.serialization.lazyObject(async () => (await import("..")).RefundSpeed).optional()
    ),
});

export declare namespace RefundsEntity {
    interface Raw {
        cf_payment_id?: number | null;
        cf_refund_id?: string | null;
        order_id?: string | null;
        refund_id?: string | null;
        entity?: "refund" | null;
        refund_amount?: number | null;
        refund_currency?: string | null;
        refund_note?: string | null;
        refund_status?: serializers.RefundsEntityRefundStatus.Raw | null;
        refund_arn?: string | null;
        refund_charge?: number | null;
        status_description?: string | null;
        metadata?: Record<string, unknown> | null;
        refund_splits?: serializers.VendorSplit.Raw[] | null;
        refund_type?: serializers.RefundsEntityRefundType.Raw | null;
        refund_mode?: serializers.RefundsEntityRefundMode.Raw | null;
        created_at?: string | null;
        processed_at?: string | null;
        refund_speed?: serializers.RefundSpeed.Raw | null;
    }
}
