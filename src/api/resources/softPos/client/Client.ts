/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as ShubhiMaheshwariApi from "../../..";
import * as serializers from "../../../../serialization";
import urlJoin from "url-join";
import * as errors from "../../../../errors";

export declare namespace SoftPos {
    interface Options {
        environment: core.Supplier<string>;
        clientId?: core.Supplier<string | undefined>;
        clientSecret?: core.Supplier<string | undefined>;
        apiVersion?: core.Supplier<string | undefined>;
    }
}

/**
 * softPOS' agent and order management system now supported by APIs
 */
export class SoftPos {
    constructor(protected readonly options: SoftPos.Options) {}

    /**
     * Use this API to create new terminals to use softPOS.
     */
    public async createTerminals(
        request: ShubhiMaheshwariApi.CreateTerminalRequest
    ): Promise<ShubhiMaheshwariApi.TerminalResponse> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this.options.environment), "terminal"),
            method: "POST",
            headers: {
                "x-client-id":
                    (await core.Supplier.get(this.options.clientId)) != null
                        ? await core.Supplier.get(this.options.clientId)
                        : undefined,
                "x-client-secret":
                    (await core.Supplier.get(this.options.clientSecret)) != null
                        ? await core.Supplier.get(this.options.clientSecret)
                        : undefined,
                "x-api-version":
                    (await core.Supplier.get(this.options.apiVersion)) != null
                        ? await core.Supplier.get(this.options.apiVersion)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "",
                "X-Fern-SDK-Version": "0.0.19",
            },
            contentType: "application/json",
            body: await serializers.CreateTerminalRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.TerminalResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ShubhiMaheshwariApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ShubhiMaheshwariApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ShubhiMaheshwariApiTimeoutError();
            case "unknown":
                throw new errors.ShubhiMaheshwariApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Use this API to view all details of a terminal.
     */
    public async getTerminalByMobileNumber(terminalPhoneNo: string): Promise<ShubhiMaheshwariApi.TerminalDetails> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this.options.environment), `terminal/${terminalPhoneNo}`),
            method: "GET",
            headers: {
                "x-client-id":
                    (await core.Supplier.get(this.options.clientId)) != null
                        ? await core.Supplier.get(this.options.clientId)
                        : undefined,
                "x-client-secret":
                    (await core.Supplier.get(this.options.clientSecret)) != null
                        ? await core.Supplier.get(this.options.clientSecret)
                        : undefined,
                "x-api-version":
                    (await core.Supplier.get(this.options.apiVersion)) != null
                        ? await core.Supplier.get(this.options.apiVersion)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "",
                "X-Fern-SDK-Version": "0.0.19",
            },
            contentType: "application/json",
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.TerminalDetails.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ShubhiMaheshwariApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ShubhiMaheshwariApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ShubhiMaheshwariApiTimeoutError();
            case "unknown":
                throw new errors.ShubhiMaheshwariApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
